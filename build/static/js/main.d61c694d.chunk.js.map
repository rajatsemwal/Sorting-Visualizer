{"version":3,"sources":["logo.svg","SortingAlgorithms/sortingalgo.js","SortVisual/Visuals.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","tempArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","i","k","j","push","doMerge","SECONDARY_COLOR","Visuals","props","state","this","resetarray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","count","maxHeap","Heap","maxComparator","pop","getHeapSortAnimations","console","log","temp","getBubbleSortAnimations","newHeight1","newHeight2","key","getInsertionSortAnimations","navbarInstance","Navbar","bg","variant","onClick","window","location","reload","Brand","href","Nav","className","mergeSort","insertionSort","heapSort","bubbleSort","map","value","idx","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"6NAAe,I,kECER,SAASA,EAAuBC,GAEnC,IAAMC,EAAa,GACnB,GAAGD,EAAME,QAAU,EAAG,OAAOF,EAE7B,IAAMG,EAAYH,EAAMI,QAExB,OADAC,EAAgBL,EAAO,EAAGA,EAAME,OAAS,EAAGC,EAAWF,GAChDA,EAGX,SAASI,EAAgBC,EAAWC,EAAUC,EAAQL,EAAWF,GAE7D,GAAGM,IAAaC,EAAhB,CAEA,IAAMC,EAAYC,KAAKC,OAAOJ,EAAWC,GAAQ,GACjDH,EAAgBF,EAAWI,EAAUE,EAAWH,EAAWL,GAC3DI,EAAgBF,EAAWM,EAAY,EAAGD,EAAQF,EAAWL,GAIjE,SAAiBK,EAAWC,EAAUE,EAAWD,EAAQL,EAAWF,GAEhE,IAAIW,EAAIL,EAAUM,EAAIN,EAAUO,EAAIL,EAAY,EAEhD,KAAMG,GAAKH,GAAaK,GAAKN,GAEzBP,EAAWc,KAAK,CAACH,EAAGE,IACpBb,EAAWc,KAAK,CAACH,EAAGE,IAEjBX,EAAUS,IAAMT,EAAUW,IACzBb,EAAWc,KAAK,CAACF,EAAGV,EAAUS,KAC9BN,EAAUO,KAAOV,EAAUS,OAG3BX,EAAWc,KAAK,CAACF,EAAGV,EAAUW,KAC9BR,EAAUO,KAAOV,EAAUW,MAInC,KAAMF,GAAKH,GACPR,EAAWc,KAAK,CAACH,EAAGA,IACpBX,EAAWc,KAAK,CAACH,EAAGA,IAEpBX,EAAWc,KAAK,CAACF,EAAGV,EAAUS,KAC9BN,EAAUO,KAAOV,EAAUS,KAG/B,KAAME,GAAKN,GACPP,EAAWc,KAAK,CAACD,EAAGA,IACpBb,EAAWc,KAAK,CAACD,EAAGA,IACpBb,EAAWc,KAAK,CAACF,EAAGV,EAAUW,KAC9BR,EAAUO,KAAOV,EAAUW,KAlC/BE,CAAQV,EAAWC,EAAUE,EAAWD,EAAQL,EAAWF,I,mCCPzDgB,EAAkB,MAEHC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTpB,MAAO,IAJI,E,qDAQnB,WACIqB,KAAKC,e,wBAET,WAEI,IADA,IAgOmBC,EAAKC,EAhOlBxB,EAAQ,GACNY,EAAI,EAAGA,EAlBM,IAkBoBA,IACrCZ,EAAMe,MA8NSQ,EA9NU,EA8NLC,EA9NQ,IA+NzBd,KAAKC,MAAMD,KAAKe,UAAYD,EAAMD,EAAM,GAAKA,KA7NpDF,KAAKK,SAAS,CAAC1B,Y,uBAGnB,WAII,IAFA,IAAMC,EAAaF,EAAuBsB,KAAKD,MAAMpB,OAF7C,WAIAY,GAEJ,IAAMe,EAAYC,SAASC,uBAAuB,aAGlD,GAFsBjB,EAAE,IAAM,EAEZ,CACd,kBAA+BX,EAAWW,GAA1C,GAAOkB,EAAP,KAAkBC,EAAlB,KAEMC,EAAcL,EAAUG,GAAWG,MACnCC,EAAcP,EAAUI,GAAWE,MAEnCE,EAAQvB,EAAE,IAAM,EAAIK,EAAkB,YAC5CmB,YAAW,WACPJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IA3CvB,EA4CRvB,QAGHwB,YAAW,WACP,kBAA+BnC,EAAWW,GAA1C,GAAOkB,EAAP,KAAkBQ,EAAlB,KACoBX,EAAUG,GAAWG,MAC7BM,OAAZ,UAAwBD,EAAxB,QAlDO,EAmDR1B,IAtBHA,EAAI,EAAGA,EAAIX,EAAWC,OAAQU,IAAM,EAApCA,K,sBA2BZ,WAGI,IADA,MDYD,SAA+BZ,GAMlC,IAJA,IAAMC,EAAa,GACfuC,EAAQ,EACNC,EAAU,IAAIC,IAAKA,IAAKC,eAErB/B,EAAI,EAAGA,EAAEZ,EAAME,OAAO,EAAGU,IAE9BX,EAAWc,KAAK,CAACH,EAAEA,EAAE,IACrB4B,GAAS,EACTC,EAAQ1B,KAAKf,EAAMY,IAGvB6B,EAAQ1B,KAAKf,EAAMA,EAAME,OAAO,IAChCD,EAAWc,KAAK,CAACf,EAAME,OAAO,EAAGF,EAAME,OAAO,IAC9CsC,GAAS,EAET,IAAK,IAAI5B,EAAIZ,EAAME,OAAS,EAAGU,GAAK,EAAGA,IAEnCZ,EAAMY,GAAK6B,EAAQG,MACnB3C,EAAWc,KAAK,CAACH,EAAEA,IACnBX,EAAWc,KAAK,CAACH,EAAEA,IACnBX,EAAWc,KAAK,CAACH,EAAGZ,EAAMY,KAG9B,MAAO,CAACX,EAAYuC,GCrCWK,CAAsBxB,KAAKD,MAAMpB,OAA5D,mBAAOC,EAAP,KAAkBuC,EAAlB,KAFO,WAGE5B,GAEL,IAAMe,EAAYC,SAASC,uBAAuB,aAClD,cAA+B5B,EAAWW,GAA1C,GAAOkB,EAAP,KAAkBC,EAAlB,KACAe,QAAQC,IAAI9C,EAAWW,IAEvB,IAAMoB,EAAcL,EAAUG,GAAWG,MACnCC,EAAcP,EAAUI,GAAWE,MAEnCE,EAAQvB,EAAI,IAAM,EAAIK,EAAkB,YAC9CmB,YAAW,WAEPJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IAxEnB,EAyEZvB,IAdEA,EAAI,EAAGA,EAAG4B,EAAO5B,IAAK,EAAtBA,GAiBT,IApBO,eAoBEA,GAEL,IAAMe,EAAYC,SAASC,uBAAuB,aAGlD,GAFsBjB,EAAI,IAAM,EAEb,CAEf,kBAA+BX,EAAWW,GAA1C,GAAOkB,EAAP,KAAkBC,EAAlB,KACAe,QAAQC,IAAI9C,EAAWW,IACvB,IAAMoB,EAAcL,EAAUG,GAAWG,MACnCC,EAAcP,EAAUI,GAAWE,MAEnCE,EAAQvB,EAAI,IAAM,EAAIK,EAAkB,YAE9CmB,YAAW,WACPJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IA5FvB,EA6FRvB,QAIHwB,YAAW,WACP,kBAA+BnC,EAAWW,GAA1C,GAAOkB,EAAP,KAAkBQ,EAAlB,KACoBX,EAAUG,GAAWG,MAC7BM,OAAZ,UAAwBD,EAAxB,QApGO,EAqGR1B,IAzBFA,EAAI4B,EAAQ,EAAG5B,EAAIX,EAAWC,OAAQU,IAAM,EAA5CA,K,wBA8Bb,WAGI,IADA,IAAMX,ED5DP,SAAiCD,GAGpC,IADA,IAAMC,EAAa,GACXW,EAAI,EAAGA,EAAIZ,EAAME,OAAQU,IAC7B,IAAI,IAAIE,EAAI,EAAGA,EAAId,EAAME,OAASU,EAAI,EAAGE,IAGrC,GAFAb,EAAWc,KAAK,CAACD,EAAGA,EAAE,IACtBb,EAAWc,KAAK,CAACD,EAAGA,EAAE,IACnBd,EAAMc,GAAKd,EAAMc,EAAE,GAAI,CAEtBb,EAAWc,KAAK,CAACD,EAAGA,EAAE,EAAGd,EAAMc,GAAId,EAAMc,EAAE,KAC3C,IAAIkC,EAAOhD,EAAMc,EAAE,GACnBd,EAAMc,EAAE,GAAKd,EAAMc,GACnBd,EAAMc,GAAKkC,OAGX/C,EAAWc,KAAK,CAACD,EAAGd,EAAMc,KAItC,OAAOb,ECyCgBgD,CAAwB5B,KAAKD,MAAMpB,OAF7C,WAGDY,GAEJ,IAAMe,EAAYC,SAASC,uBAAuB,aAClD,GAAqB,OAAlB5B,EAAWW,GAAa,iBAG3B,GADsBA,EAAE,IAAM,EACZ,CAEd,kBAA+BX,EAAWW,GAA1C,GAAOkB,EAAP,KAAkBC,EAAlB,KACMC,EAAcL,EAAUG,GAAWG,MACnCC,EAAcP,EAAUI,GAAWE,MACnCE,EAAQvB,EAAE,IAAM,EAAIK,EAAkB,YAE5CmB,YAAW,WACPJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IA5HvB,EA6HRvB,QAGyB,IAAzBX,EAAWW,GAAGV,OAC5BkC,YAAW,WAEV,kBAAuDnC,EAAWW,GAAlE,GAAOkB,EAAP,KAAkBC,EAAlB,KAA6BmB,EAA7B,KAAyCC,EAAzC,KACMnB,EAAcL,EAAUG,GAAWG,MACnCC,EAAcP,EAAUI,GAAWE,MACzCD,EAAYO,OAAZ,UAAwBY,EAAxB,MACAjB,EAAYK,OAAZ,UAAwBW,EAAxB,QAvIqB,EAwInBtC,GAIHwB,YAAW,WAEV,kBAA+BnC,EAAWW,GAA1C,GAAOkB,EAAP,KAAkBQ,EAAlB,KACoBX,EAAUG,GAAWG,MAC7BM,OAAZ,UAAwBD,EAAxB,QAhJqB,EAiJnB1B,IApCQA,EAAI,EAAGA,EAAIX,EAAWC,OAAQU,IAAK,EAAnCA,K,2BA0CZ,WAII,IAFA,IAAMX,EDtDP,SAAoCD,GAIvC,IAFA,IAAMC,EAAa,GAEVW,EAAI,EAAGA,EAAIZ,EAAME,OAAOU,IAAI,CAMjC,IAJA,IAAIE,EAAIF,EAAE,EAENwC,EAAMpD,EAAMY,GAETE,GAAK,GAAKsC,EAAMpD,EAAMc,IAEzBb,EAAWc,KAAK,CAACD,EAAE,EAAEA,IACrBb,EAAWc,KAAK,CAACD,EAAE,EAAEA,IACrBb,EAAWc,KAAK,CAACD,EAAE,EAAEd,EAAMc,KAC3Bd,EAAMc,EAAE,GAAKd,EAAMc,GACnBA,GAAK,EAGTb,EAAWc,KAAK,CAACH,EAAEE,EAAE,IACrBb,EAAWc,KAAK,CAACH,EAAEE,EAAE,IACrBb,EAAWc,KAAK,CAACD,EAAE,EAAEsC,IACrBpD,EAAMc,EAAE,GAAKsC,EAGjB,OAAOnD,EC6BgBoD,CAA2BhC,KAAKD,MAAMpB,OAF7C,WAIHY,GACL,IAAMe,EAAYC,SAASC,uBAAuB,aAGlD,GAFsBjB,EAAI,IAAM,EAEb,CACf,kBAA+BX,EAAWW,GAA1C,GAAOkB,EAAP,KAAkBC,EAAlB,KACMC,EAAcL,EAAUG,GAAWG,MACnCC,EAAcP,EAAUI,GAAWE,MACnCE,EAAQvB,EAAI,IAAM,EAAIK,EAAkB,YAE9CmB,YAAW,WAEPJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IAxKvB,EAyKRvB,QAIHwB,YAAW,WAEP,kBAA+BnC,EAAWW,GAA1C,GAAOkB,EAAP,KAAkBQ,EAAlB,KACoBX,EAAUG,GAAWG,MAC7BM,OAAZ,UAAwBD,EAAxB,QAjLO,EAkLR1B,IAvBFA,EAAI,EAAGA,EAAIX,EAAWC,OAAQU,IAAM,EAApCA,K,oBA4Bb,WAAU,IAAD,OACEZ,EAASqB,KAAKD,MAAdpB,MACDsD,EACF,mCACR,eAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAA1B,yDAII,wBAAQC,QAAS,WAkEjBC,OAAOC,SAASC,QAAO,IAlEvB,gCAJJ,mMAQI,cAACN,EAAA,EAAOO,MAAR,CAAcC,KAAK,QAAnB,gCARJ,kHAYI,eAACC,EAAA,EAAD,CAAKC,UAAU,UAAf,UACI,wBAAQP,QAAS,kBAAM,EAAKQ,aAA5B,wBADJ,eAGI,wBAAQR,QAAS,kBAAM,EAAKS,iBAA5B,4BAHJ,eAKI,wBAAQT,QAAS,kBAAM,EAAKU,YAA5B,uBALJ,eAOI,wBAAQV,QAAS,kBAAM,EAAKW,cAA5B,iCAQJ,OACA,gCAEKf,EACL,qBAAKW,UAAU,kBAAf,SAEKjE,EAAMsE,KAAI,SAACC,EAAOC,GAAR,OACX,qBACIP,UAAU,YAEVhC,MAAO,CACPI,gBA/NM,OAgONE,OAAO,GAAD,OAAKgC,EAAL,QAHDC,e,GA1NgBC,IAAMC,WCF5BC,MARf,WACE,OACE,qBAAKV,UAAU,MAAf,SACE,cAAC,EAAD,OCKSW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3D,SAAS4D,eAAe,SAM1BZ,M","file":"static/js/main.d61c694d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import Heap from 'heap-js'\r\n\r\nexport function getMergeSortAnimations(array) {\r\n\r\n    const animations = []\r\n    if(array.length <= 1) return array\r\n\r\n    const tempArray = array.slice()\r\n    mergeSortHelper(array, 0, array.length - 1, tempArray, animations)\r\n    return animations\r\n}\r\n\r\nfunction mergeSortHelper(mainArray, startIdx, endIdx, tempArray, animations) {\r\n\r\n    if(startIdx === endIdx) return\r\n\r\n    const middleIdx = Math.floor((startIdx + endIdx)/2)\r\n    mergeSortHelper(tempArray, startIdx, middleIdx, mainArray, animations)\r\n    mergeSortHelper(tempArray, middleIdx + 1, endIdx, mainArray, animations)\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, tempArray, animations)\r\n}\r\n\r\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, tempArray, animations) {\r\n\r\n    let i = startIdx, k = startIdx, j = middleIdx + 1\r\n    \r\n    while(i <= middleIdx && j <= endIdx) {\r\n\r\n        animations.push([i, j])\r\n        animations.push([i, j])\r\n    \r\n        if(tempArray[i] <= tempArray[j]) {\r\n            animations.push([k, tempArray[i]]) \r\n            mainArray[k++] = tempArray[i++]\r\n        }\r\n        else {\r\n            animations.push([k, tempArray[j]])\r\n            mainArray[k++] = tempArray[j++]\r\n        }\r\n    }\r\n\r\n    while(i <= middleIdx) {\r\n        animations.push([i, i])\r\n        animations.push([i, i])\r\n\r\n        animations.push([k, tempArray[i]])\r\n        mainArray[k++] = tempArray[i++]\r\n        }\r\n\r\n    while(j <= endIdx) {\r\n        animations.push([j, j])\r\n        animations.push([j, j])\r\n        animations.push([k, tempArray[j]])\r\n        mainArray[k++] = tempArray[j++]\r\n    }\r\n}\r\n\r\nexport function getBubbleSortAnimations(array) {\r\n\r\n    const animations = []\r\n    for(let i = 0; i < array.length; i++) {\r\n        for(let j = 0; j < array.length - i - 1; j++) {\r\n            animations.push([j, j+1])\r\n            animations.push([j, j+1])\r\n            if(array[j] > array[j+1]) {\r\n                \r\n                animations.push([j, j+1, array[j], array[j+1]])\r\n                let temp = array[j+1]\r\n                array[j+1] = array[j]\r\n                array[j] = temp\r\n            }\r\n            else {\r\n                animations.push([j, array[j]])\r\n            }\r\n        }\r\n    }\r\n    return animations\r\n}\r\n\r\nexport function getHeapSortAnimations(array) {\r\n    \r\n    const animations = []\r\n    let count = 0\r\n    const maxHeap = new Heap(Heap.maxComparator)\r\n    \r\n    for (let i = 0; i<array.length-1; i++) {\r\n    \r\n        animations.push([i,i+1])\r\n        count += 1\r\n        maxHeap.push(array[i])\r\n    }\r\n\r\n    maxHeap.push(array[array.length-1])\r\n    animations.push([array.length-1, array.length-1])\r\n    count += 1\r\n    \r\n    for (let i = array.length - 1; i >= 0; i--){\r\n    \r\n        array[i] = maxHeap.pop();\r\n        animations.push([i,i])\r\n        animations.push([i,i])\r\n        animations.push([i, array[i]])\r\n    \r\n    }\r\n    return [animations, count]\r\n}\r\n\r\n\r\nexport function getInsertionSortAnimations(array){\r\n       \r\n    const animations = []\r\n    \r\n    for (let i = 1; i < array.length;i++){\r\n\r\n        let j = i-1\r\n      \r\n        let key = array[i]\r\n        \r\n        while (j >= 0 && key < array[j]){\r\n            \r\n            animations.push([j+1,j])\r\n            animations.push([j+1,j])\r\n            animations.push([j+1,array[j]])\r\n            array[j+1] = array[j]\r\n            j -= 1\r\n        }\r\n        \r\n        animations.push([i,j+1])\r\n        animations.push([i,j+1])\r\n        animations.push([j+1,key])\r\n        array[j+1] = key\r\n        }\r\n  \r\n    return animations;\r\n}","import React from 'react'\r\nimport './Visuals.css'\r\nimport { useState } from 'react'\r\nimport RangeSlider from 'react-bootstrap-range-slider';\r\nimport {getMergeSortAnimations, getInsertionSortAnimations, getHeapSortAnimations, getBubbleSortAnimations} from '../SortingAlgorithms/sortingalgo'\r\nimport { Button, Navbar, Nav, NavItem, NavDropdown, MenuItem } from 'react-bootstrap';\r\nimport { Form, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst ANIMATION_SPEED_MS = 7\r\nconst NUMBER_OF_ARRAY_BARS = 180\r\nconst PRIMARY_COLOR = 'teal'\r\nconst SECONDARY_COLOR = 'red'\r\n\r\nexport default class Visuals extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            array: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetarray()\r\n    }\r\n    resetarray() {\r\n        const array = []\r\n        for(let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            array.push(randomnumbers(5, 123))\r\n        }\r\n        this.setState({array})\r\n    }\r\n\r\n    mergeSort() {\r\n\r\n        const animations = getMergeSortAnimations(this.state.array)\r\n\r\n        for(let i = 0; i < animations.length; i++) {\r\n            \r\n            const arrayBars = document.getElementsByClassName('array-bar')\r\n            const isColorChange = i%3 !== 2\r\n\r\n            if(isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i]\r\n\r\n                const barOneStyle = arrayBars[barOneIdx].style\r\n                const barTwoStyle = arrayBars[barTwoIdx].style\r\n\r\n                const color = i%3 === 0 ? SECONDARY_COLOR : 'turquoise'\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color\r\n                    barTwoStyle.backgroundColor = color    \r\n                }, i * ANIMATION_SPEED_MS)\r\n            }\r\n            else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i]\r\n                    const barOneStyle = arrayBars[barOneIdx].style\r\n                    barOneStyle.height = `${newHeight}px`\r\n                }, i * ANIMATION_SPEED_MS)\r\n            }\r\n        }\r\n    }\r\n\r\n    heapSort() {\r\n\r\n        const [animations,count] = getHeapSortAnimations(this.state.array)\r\n        for (let i = 0; i< count; i++){\r\n\r\n            const arrayBars = document.getElementsByClassName('array-bar')\r\n            const [barOneIdx, barTwoIdx] = animations[i]\r\n            console.log(animations[i])\r\n\r\n            const barOneStyle = arrayBars[barOneIdx].style\r\n            const barTwoStyle = arrayBars[barTwoIdx].style\r\n\r\n            const color = i % 3 === 0 ? SECONDARY_COLOR : 'turquoise'\r\n            setTimeout(() => {\r\n            \r\n                barOneStyle.backgroundColor = color\r\n                barTwoStyle.backgroundColor = color\r\n            }, i * ANIMATION_SPEED_MS)\r\n        }\r\n        \r\n        for (let i = count + 1; i < animations.length; i++) {\r\n            \r\n            const arrayBars = document.getElementsByClassName('array-bar')\r\n            const isColorChange = i % 3 !== 2\r\n            \r\n            if (isColorChange) {\r\n                    \r\n                const [barOneIdx, barTwoIdx] = animations[i]\r\n                console.log(animations[i])\r\n                const barOneStyle = arrayBars[barOneIdx].style\r\n                const barTwoStyle = arrayBars[barTwoIdx].style\r\n\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : 'turquoise'\r\n                \r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color\r\n                    barTwoStyle.backgroundColor = color\r\n                }, i * ANIMATION_SPEED_MS)\r\n            } \r\n            else {\r\n            \r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i]\r\n                    const barOneStyle = arrayBars[barOneIdx].style\r\n                    barOneStyle.height = `${newHeight}px`\r\n                }, i * ANIMATION_SPEED_MS)\r\n            }\r\n        }\r\n    }\r\n\r\n    bubbleSort() {\r\n\r\n        const animations = getBubbleSortAnimations(this.state.array)\r\n        for(let i = 0; i < animations.length; i++) {\r\n            \r\n            const arrayBars = document.getElementsByClassName('array-bar')\r\n            if(animations[i] === null) continue\r\n\r\n            const isColorChange = i%3 !== 2\r\n            if(isColorChange) {\r\n\r\n                const [barOneIdx, barTwoIdx] = animations[i]\r\n                const barOneStyle = arrayBars[barOneIdx].style\r\n                const barTwoStyle = arrayBars[barTwoIdx].style\r\n                const color = i%3 === 0 ? SECONDARY_COLOR : 'turquoise'\r\n\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color\r\n                    barTwoStyle.backgroundColor = color    \r\n                }, i * ANIMATION_SPEED_MS)\r\n            }\r\n            else {\r\n                if(animations[i].length === 4) {\r\n\t\t\t\t\tsetTimeout(() => {\r\n\r\n\t\t\t\t\t\tconst [barOneIdx, barTwoIdx, newHeight1, newHeight2] = animations[i]\r\n\t\t\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style\r\n\t\t\t\t\t\tconst barTwoStyle = arrayBars[barTwoIdx].style\r\n\t\t\t\t\t\tbarOneStyle.height = `${newHeight2}px`\r\n\t\t\t\t\t\tbarTwoStyle.height = `${newHeight1}px`\r\n\t\t\t\t\t}, i * ANIMATION_SPEED_MS)\r\n                }\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tconst [barOneIdx, newHeight] = animations[i]\r\n\t\t\t\t\t\tconst barOneStyle = arrayBars[barOneIdx].style\r\n\t\t\t\t\t\tbarOneStyle.height = `${newHeight}px`\r\n\t\t\t\t\t}, i * ANIMATION_SPEED_MS)\r\n\t\t\t\t}\t\r\n            }\r\n        }\r\n    }\r\n\r\n    insertionSort() {\r\n\r\n        const animations = getInsertionSortAnimations(this.state.array)\r\n        \r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar')\r\n            const isColorChange = i % 3 !== 2\r\n          \r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i]\r\n                const barOneStyle = arrayBars[barOneIdx].style\r\n                const barTwoStyle = arrayBars[barTwoIdx].style\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : 'turquoise'\r\n          \r\n                setTimeout(() => {\r\n              \r\n                    barOneStyle.backgroundColor = color\r\n                    barTwoStyle.backgroundColor = color\r\n                }, i * ANIMATION_SPEED_MS)\r\n            } \r\n            else {\r\n            \r\n                setTimeout(() => {\r\n                    \r\n                    const [barOneIdx, newHeight] = animations[i]\r\n                    const barOneStyle = arrayBars[barOneIdx].style\r\n                    barOneStyle.height = `${newHeight}px`\r\n                }, i * ANIMATION_SPEED_MS)\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n        const navbarInstance = (\r\n            <>\r\n    <Navbar bg=\"dark\" variant=\"dark\">\r\n        \r\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n        <button onClick={() => refreshPage()}>Generate New Array</button>\r\n        \r\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; \r\n        \r\n        <Navbar.Brand href=\"#home\">Sorting Visualizer</Navbar.Brand>\r\n        \r\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;\r\n        \r\n        <Nav className=\"ml-auto\">\r\n            <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n            &nbsp;&nbsp;&nbsp; \r\n            <button onClick={() => this.insertionSort()}>Insertion Sort</button>\r\n            &nbsp;&nbsp;&nbsp; \r\n            <button onClick={() => this.heapSort()}>Heap Sort</button>\r\n            &nbsp;&nbsp;&nbsp; \r\n            <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n        </Nav>\r\n        \r\n    </Navbar>\r\n    \r\n    </>\r\n\r\n        );\r\n        return (\r\n        <div>\r\n\r\n            {navbarInstance}\r\n        <div className=\"array-container\">\r\n            \r\n            {array.map((value, idx) => (\r\n            <div\r\n                className=\"array-bar\"\r\n                key={idx}\r\n                style={{\r\n                backgroundColor: PRIMARY_COLOR,\r\n                height: `${value}px`,\r\n\r\n                }}></div>\r\n                \r\n\r\n            ))}\r\n            \r\n            {/* \\*<button onClick={() => this.testSortingAlgorithms()}>\r\n            //Test Sorting Algorithms\r\n            </button> */}\r\n        </div>\r\n        </div>  \r\n        );\r\n    }\r\n    }\r\n\r\n    function randomnumbers(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1) * min)\r\n    }\r\n\r\n    function arraysAreEqual(array1, array2) {\r\n\r\n        if(array1.length !== array2.length) return false;\r\n\r\n        for(let i = 0; i < array1.length; i++)\r\n            if(array1[i] !== array2[i]) return false;\r\n\r\n        return true\r\n    }\r\n\r\n    function refreshPage() {\r\n        window.location.reload(false);\r\n    }\r\n\r\n    const MyComponent = () => {\r\n\r\n        const [ value, setValue ] = useState(0); \r\n    \r\n        return (\r\n        <RangeSlider\r\n            value={value}\r\n            onChange={changeEvent => setValue(changeEvent.target.value)}\r\n        />\r\n        )\r\n    \r\n    }","import logo from './logo.svg';\nimport './App.css';\nimport Visuals from './SortVisual/Visuals';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visuals></Visuals>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}